import { AgentResponse } from "../services/agent.service";

export interface AgentEngagementAttributes {
    id?: number,
    engagement_id: string,
    direction: string,
    start_time: Date,
    end_time: Date,
    enter_channel: string,
    enter_channel_source: string,
    channel: string,
    channel_source: string,
    consumer_name: string,
    consumer_email: string,
    dnis: string,
    ani: string,
    queue_id: string,
    queue_name: string,
    user_id: string,
    user_name: string,
    duration: number,
    handle_duration: number,
    conversation_duration: number,
    hold_count: number,
    hold_duration: number,
    warm_transfer_initiated_count: number,
    warm_transfer_completed_count: number,
    direct_transfer_count: number,
    transfer_initiated_count: number,
    transfer_completed_count: number,
    warm_conference_count: number,
    conference_count: number,
    abandoned_count: number,
}

export interface AgentEngagementOutput {
    engagement_id: string,
    direction: string,
    start_time: Date,
    enter_channel: string,
    consumer_name: string,
    dnis: string,
    ani: string,
    queue_name: string,
    user_name: string,
    duration: number,
    hold_count: number,
    hold_duration: number,
    warm_transfer_initiated_count: number,
    warm_transfer_completed_count: number,
    direct_transfer_count: number,
    transfer_initiated_count: number,
    transfer_completed_count: number,
    warm_conference_count: number,
    conference_count: number,
    abandoned_count: number,
}

export interface AgentEngagementResponse {
    success: boolean,
    records: AgentEngagementOutput[],
    totalRecords: number,
    agents?: AgentResponse[],
}